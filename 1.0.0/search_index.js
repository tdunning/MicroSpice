var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MicroSpice","category":"page"},{"location":"#MicroSpice","page":"Home","title":"MicroSpice","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MicroSpice is a very simple circuit simulator that simulates an electronic circuit composed a variety of passive components. This circuit can be constructed using a subset of standard Spice netlist syntax.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As an example, here is a simple RLC circuit with in as input and out as output","category":"page"},{"location":"","page":"Home","title":"Home","text":"L1 in  out 100nH\nR1 out gnd  50Ω\nC1 out gnd 100nF","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently the only supported components are resistors (R), inductors (L) and capacitors (C). Component values can be specified using standard SI prefixes such as k (kilo = 1e3), M (Mega=1e6), G(giga=1e9), m (milli=1e-3), μ (micro=1e-6), n (nano=1e-9), or p (pico=1e-12). In addition, the non-standard forms u (micro=1e-6) and meg (Mega=1e6) are used for Spice compatibility.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Units including H (Henry), F (Farad) and Ω (ohm) are allowed, but are optional, but the unit must match the type of component.","category":"page"},{"location":"#Running-a-Simulation","page":"Home","title":"Running a Simulation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Netlist describes an abstract circuit. To simulate that circuit, the circuit is turned into a matrix equation consisting of complex admittances that relate the voltages and currents in the circuit. In this conversion, the voltages for any subset of nodes can be forced and currents can be injected into any nodes that are not forced to a particular voltage. The result of the voltages and all of the node-to-node currents are then computed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In normal practice, the internals of this conversion are hidden from view. All you need to do is provide a Netlist and a list of inputs and outputs and you get a simulation function that takes a frequency, a vector of voltages and returns a vector of output voltages. You can call that simulation function repeatedly for different frequencies or different inputs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Taking the circuit given above, if we take node in as the input, node out as the output and gnd as the ground reference, we can simulate the voltage transfer function for this circuit with this code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MicroSpice\nnl = MicroSpice.Netlist(\"L1 in  out 100nH\\nR1 out gnd 50Ω\\nC1 out gnd 100nF\\n\")\ns = MicroSpice.solve(nl, [:in, :gnd], [\"out\"])\ndecibel(x) = 20 * log10(abs(x))\n[decibel(only(s(f, [1, 0]))) for f in [1.4e6, 1.5e6, 1.62e6, 1.8e6]]\n# output\n4-element Vector{Float64}:\n 12.883077832402897\n 18.914298710446417\n 27.65586909592151\n 11.05634871505561","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MicroSpice]","category":"page"},{"location":"#MicroSpice.ComplexCircuit","page":"Home","title":"MicroSpice.ComplexCircuit","text":"A circuit is defined as a set of nodes connected by admittances. Each node may be set to a particular voltage, or can have a current injected or it can be free-floating. This is modeled as a linear system of equations  in terms of the n nodal voltages of which m are externally constrained,  and k injected currents. The first n of these equations define  the relationship between node voltages and injected currents and are of rank n-1. The next m equations define externally set voltages  followed by k equations for injected currents. We assume that imposed voltages and injected currents are on different nodes so this gives a rank of n + m + k - 1 so far. There are an additional n-m-k equations that set all remaining injected currents to zero and a final constraint that sets the sum of all injected currents to zero.\n\n\n\n\n\n","category":"type"},{"location":"#MicroSpice.Link","page":"Home","title":"MicroSpice.Link","text":"A Link is a composite of pure resistance, inductance and capacitance arranged in parallel. \n\nTo simplify combining multiple links, resistance and inductance are  retained in inverse form (i.e. 1/R, 1/L).\n\n\n\n\n\n","category":"type"},{"location":"#MicroSpice.Netlist-Tuple{AbstractString}","page":"Home","title":"MicroSpice.Netlist","text":"A netlist is defined as a set of nodes which are connected by ideal resistors, inductors and capacitors. Such a netlist can be resolved into a ComplexCircuit at any desired frequency by replacing the inductors and capacitors by their equivalent  complex impedances at that frequency.\n\nConstructs a Netlist from a Spice circuit. As an example, here  is a simple RLC circuit with in as input and out as output\n\nL1 in  out 100nH\nR1 out gnd  50Ω\nC1 out gnd 100nF\n\nCurrently the only supported components are resistors (R), inductors (L) and capacitors (C). Component values can be specified using standard SI prefixes such as k (kilo = 1e3),  M (Mega=1e6), G(giga=1e9), m (milli=1e-3), μ (micro=1e-6),  n (nano=1e-9), or p (pico=1e-12). In addition, the non-standard  forms u (micro=1e-6) and meg (Mega=1e6) are used for Spice compatibility.\n\nUnits including H (Henry), F (Farad) and Ω (ohm) are allowed, but  are optional, but only the correct unit type is allowed.f\n\nA Netlist can be converted to a ComplexCircuit at a specific frequency and then solved with specified input voltages and currents to find the voltages for all nodes in the circuit. Taking the example above,  we can find the response for a few frequencies using this  code\n\nnl = MicroSpice.Netlist(\"L1 in  out 100n\nR1 out gnd 50\nC1 out gnd 100n\n\")\ns = MicroSpice.solve(nl, [:in, :gnd], [:out])\ndecibel(x) = 20 * log10(abs(x))\n[decibel(only(s(f, [1, 0]))) for f in [1.4e6, 1.5e6, 1.62e6, 1.8e6]]\n# output\n4-element Vector{Float64}:\n 12.883077832402897\n 18.914298710446417\n 27.65586909592151\n 11.05634871505561\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.Netlist-Tuple{Any}","page":"Home","title":"MicroSpice.Netlist","text":"Reads some input and parses that input as a netlist\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.coil-Tuple{Any, Any, Any}","page":"Home","title":"MicroSpice.coil","text":"Inductance in nH of a coil with n turns d mm in diameter and l mm long\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.inputImpedance-Tuple{MicroSpice.Netlist, Any, Any}","page":"Home","title":"MicroSpice.inputImpedance","text":"Returns a function that takes a frequency and computes the impedance of a circuit from the specified input to the specified reference (ground) node.\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.solve-Tuple{MicroSpice.ComplexCircuit, Any, Any}","page":"Home","title":"MicroSpice.solve","text":"Compute the voltages and injected currents for each node.\n\nThe input is a list of (i V_i) pairs which represent the imposed voltages and a list of injected currents as (i I_i). The nodes with imposed voltages should not overlap with the nodes with injected currents. All nodes without an imposed voltage are considered free-floating and their voltage level will be computed. Nodes with no injected current are considered isolated except for the connections specified in the connections in the circuit.\n\nThe result is a vector of node voltages and injected currents V_1 ldots V_n I_1 ldots I_n\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.solve-Tuple{MicroSpice.Netlist, Vector, Vector}","page":"Home","title":"MicroSpice.solve","text":"Returns a function that simulates a circuit with specified voltage inputs and outputs. That function takes as arguments the frequency and a list of input voltages and it returns a list of output voltages.\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.xc-Tuple{Any, Any}","page":"Home","title":"MicroSpice.xc","text":"Complex reactance of a capacitor at a given frequency\n\n\n\n\n\n","category":"method"},{"location":"#MicroSpice.xl-Tuple{Any, Any}","page":"Home","title":"MicroSpice.xl","text":"Complex reactance of an inductor at a given frequency\n\n\n\n\n\n","category":"method"}]
}
